#ifndef CHIP_8_H
#define CHIP_8_H

#include <string>

class Chip8
{

	uint8_t opcode; //Stores current opcode

	unsigned char memory[4096]; //4KB of memory

	//CPU registers
	unsigned char V[16]; //General purpose register
	uint8_t I;// Index register
	unsigned int pc; //Program counter, must be at least the same size as memory

	//Stack
	uint8_t stack[16];
	uint8_t stackPointer; 

	//fontset
	uint8_t fontset[80] =	{ 
	0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
  0x20, 0x60, 0x20, 0x20, 0x70, // 1
  0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
  0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
  0x90, 0x90, 0xF0, 0x10, 0x10, // 4
  0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
  0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
  0xF0, 0x10, 0x20, 0x40, 0x40, // 7
  0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
  0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
  0xF0, 0x90, 0xF0, 0x90, 0x90, // A
  0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
  0xF0, 0x80, 0x80, 0x80, 0xF0, // C
  0xE0, 0x90, 0x90, 0x90, 0xE0, // D
  0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
  0xF0, 0x80, 0xF0, 0x80, 0x80  // F
	};
	//Timers
	uint8_t dTimer;
	uint8_t soundTimer;

	public:
		Chip8();
		int loadProgram(std::string file);
		void emulateCycle();
		void refreshKeys();
		bool drawFlag; //Determine whenever or not to redraw the screen

		//Keyboard state
		bool key[16];

};

#endif 
